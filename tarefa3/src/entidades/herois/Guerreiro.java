package entidades.herois;

import entidades.Personagem;
import itens.armas.Arma;
import entidades.acoes.AcaoDeCombate;
import entidades.acoes.AtaqueComArma;
import entidades.acoes.HabilidadeDeFogo;
import entidades.acoes.Curar;

public class Guerreiro extends Heroi {
    private int furia;
    
    // construtor simplificado - valores padr√£o para n√≠vel/experi√™ncia
    public Guerreiro(String nome, int forca, int vida, Arma arma) {
        super(nome, forca, vida, arma, 1, 0, 150, 0);
        this.furia = 0;
        inicializarAcoes();
    }
    
    // construtor completo
    public Guerreiro(String nome, int forca, int vida, Arma arma, int nivel, 
                    int experiencia, int experienciaParaProximoNivel, int sorte, int furia) {
        super(nome, forca, vida, arma, nivel, experiencia, experienciaParaProximoNivel, sorte);
        this.furia = furia;
        inicializarAcoes();
    }
    
    // Gets e Sets
    public int getFuria() {
        return furia;
    }
    
    public void setFuria(int furia) {
        this.furia = Math.max(0, furia); // F√∫ria n√£o pode ser negativa
    }
    
    public void aumentarFuria(int quantidade) {
        this.furia += quantidade;
        System.out.println(getNome() + " ganhou " + quantidade + " de f√∫ria! Total: " + furia);
    }
    
    public void reduzirFuria(int quantidade) {
        this.furia = Math.max(0, this.furia - quantidade);
        System.out.println(getNome() + " perdeu " + quantidade + " de f√∫ria! Total: " + furia);
    }

    // Inicializa as a√ß√µes do Guerreiro
    private void inicializarAcoes() {
        adicionarAcao(new AtaqueBasico());
        adicionarAcao(new GolpePoderoso());
        adicionarAcao(new FuriaBerserk());
        adicionarAcao(new SegundoFolego());
    }

    // A√ß√£o 1: Ataque B√°sico (gera f√∫ria)
    private class AtaqueBasico implements AcaoDeCombate {
        @Override
        public void executar(entidades.interfaces.Combatente usuario, entidades.interfaces.Combatente alvo) {
            int dano = getDanototal();
            System.out.println("‚öîÔ∏è " + getNome() + " ataca com " + getArma().getNome() + "!");
            System.out.println("üí• Causa " + dano + " de dano!");
            alvo.receberDano(dano);
            aumentarFuria(3); // Gera f√∫ria ao atacar
        }
        
        @Override
        public String toString() {
            return "Ataque B√°sico";
        }
    }

    // A√ß√£o 2: Golpe Poderoso (mais dano, gera mais f√∫ria)
    private class GolpePoderoso implements AcaoDeCombate {
        @Override
        public void executar(entidades.interfaces.Combatente usuario, entidades.interfaces.Combatente alvo) {
            int dano = getDanototal() + 10; // Dano extra
            System.out.println("üí¢ " + getNome() + " desfere um Golpe Poderoso!");
            System.out.println("üí•üí• Causa " + dano + " de dano!");
            alvo.receberDano(dano);
            aumentarFuria(5); // Gera mais f√∫ria
        }
        
        @Override
        public String toString() {
            return "Golpe Poderoso";
        }
    }

    // A√ß√£o 3: F√∫ria Berserk (usa f√∫ria acumulada)
    private class FuriaBerserk implements AcaoDeCombate {
        @Override
        public void executar(entidades.interfaces.Combatente usuario, entidades.interfaces.Combatente alvo) {
            if (furia >= 7) {
                System.out.println("üò† " + getNome() + " ativou a F√öRIA BERSERK!");
                int dano = getDanototal() * 3;
                System.out.println("üí•üí•üí• Dano triplicado: " + dano + "!");
                alvo.receberDano(dano);
                reduzirFuria(7); // Consome f√∫ria
            } else {
                System.out.println("üòê " + getNome() + " tentou usar F√∫ria Berserk mas n√£o tem f√∫ria suficiente!");
                System.out.println("F√∫ria necess√°ria: 7, F√∫ria atual: " + furia);
                // Fallback: usa ataque b√°sico se n√£o tiver f√∫ria
                int dano = getDanototal();
                System.out.println("‚öîÔ∏è Usando ataque b√°sico instead! Causa " + dano + " de dano!");
                alvo.receberDano(dano);
                aumentarFuria(2); // Gera um pouco de f√∫ria mesmo falhando
            }
        }
        
        @Override
        public String toString() {
            return "F√∫ria Berserk";
        }
    }

    // A√ß√£o 4: Segundo F√¥lego (cura usando f√∫ria)
    private class SegundoFolego implements AcaoDeCombate {
        @Override
        public void executar(entidades.interfaces.Combatente usuario, entidades.interfaces.Combatente alvo) {
            if (furia >= 4) {
                int cura = 30 + (furia * 2); // Cura base + b√¥nus de f√∫ria
                System.out.println("‚ú® " + getNome() + " usa Segundo F√¥lego!");
                System.out.println("‚ù§Ô∏è  Recupera " + cura + " pontos de vida!");
                receberCura(cura);
                reduzirFuria(4); // Consome f√∫ria
            } else {
                System.out.println("üòê " + getNome() + " tentou usar Segundo F√¥lego mas n√£o tem f√∫ria suficiente!");
                System.out.println("F√∫ria necess√°ria: 4, F√∫ria atual: " + furia);
                // Fallback: ataque b√°sico
                int dano = getDanototal();
                System.out.println("‚öîÔ∏è Usando ataque b√°sico instead! Causa " + dano + " de dano!");
                alvo.receberDano(dano);
                aumentarFuria(2);
            }
        }
        
        @Override
        public String toString() {
            return "Segundo F√¥lego";
        }
    }

    @Override
    public void status() {
        super.status();
        System.out.println("F√∫ria: " + furia + "/10");
        System.out.println("=== A√ß√µes do Guerreiro ===");
        System.out.println("1. Ataque B√°sico - Dano normal +3 f√∫ria");
        System.out.println("2. Golpe Poderoso - Dano alto +5 f√∫ria");
        System.out.println("3. F√∫ria Berserk - Dano triplo (custa 7 f√∫ria)");
        System.out.println("4. Segundo F√¥lego - Cura (custa 4 f√∫ria)");
    }
}